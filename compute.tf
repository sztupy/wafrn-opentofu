resource "oci_core_instance" "app_instance" {
  availability_domain = random_shuffle.compute_ad.result[0]
  compartment_id      = var.compartment_ocid
  display_name        = "wafrn-${random_string.deploy_id.result}"
  shape               = local.instance_shape
  freeform_tags       = local.common_tags

  shape_config {
    ocpus         = var.instance_ocpus
    memory_in_gbs = var.instance_shape_config_memory_in_gbs
  }

  source_details {
    boot_volume_size_in_gbs = var.instance_volume_size
    source_type             = "image"
    source_id               = lookup(data.oci_core_images.compute_images.images[0], "id")
  }

  create_vnic_details {
    subnet_id        = oci_core_subnet.wafrn_main_subnet.id
    display_name     = "primaryvnic"
    assign_public_ip = false
    hostname_label   = "wafrn-${random_string.deploy_id.result}"
    private_ip       = var.instance_private_ip
  }

  metadata = {
    ssh_authorized_keys = var.generate_public_ssh_key ? tls_private_key.compute_ssh_key.public_key_openssh : var.public_ssh_key
    user_data           = data.cloudinit_config.nodes.rendered
  }

  lifecycle {
    ignore_changes = [
      metadata.user_data
    ]
  }
}

resource "oci_identity_dynamic_group" "wafrn_instance_group" {
  compartment_id = var.compartment_ocid
  description    = "wafrn-dynamic-group-${random_string.deploy_id.result}"
  matching_rule  = "any {instance.compartment.id = '${var.compartment_ocid}'}"
  name           = "wafrn-dynamic-group-${random_string.deploy_id.result}"
}

resource "oci_logging_log_group" "wafrn_app_log_group" {
  compartment_id = var.compartment_ocid
  display_name   = "wafrn-app-log-group-${random_string.deploy_id.result}"
}

resource "oci_logging_log" "wafrn_app_log" {
  display_name = "wafrn-app-log-${random_string.deploy_id.result}"
  log_type     = "CUSTOM"
  log_group_id = oci_logging_log_group.wafrn_app_log_group.id
}

### Important Security Notice ###
# The private key generated by this resource will be stored unencrypted in your Terraform state file.
# Use of this resource for production deployments is not recommended.
# Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run.

# Generate ssh keys to access Compute Nodes, if generate_public_ssh_key=true, applies to the Compute
resource "tls_private_key" "compute_ssh_key" {
  algorithm = "RSA"
  rsa_bits  = 2048
}
